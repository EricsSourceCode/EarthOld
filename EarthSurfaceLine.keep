/*

This is not being used anymore.

// Copyright Eric Chauvin 2018.
// My blog is at:
// https://scientificmodels.blogspot.com/


using System;
using System.Text;


    // "IERS Reference Meridian: 102 meters east
    // of the Greenwich meridian."


namespace ClimateModel
{
  class EarthSurfaceLine
  {
  private MainForm MForm;
  private ReferenceSurfaceVertex[] RefSurfaceVertexArray;
  private int RefVertexArrayLast = 0;
  private double RadiusMinor = 0;
  private double RadiusMajor = 0;
  private double MinDotProduct = 10;
  private double MaxDotProduct = 0;
  private double MinFlatNorm = 100000000000000d;
  private double MaxFlatNorm = 0;

  private const double LatitudeRadiansDelta =
                       ModelConstants.TenToMinus6 *
                       ModelConstants.TenToMinus1;



  public struct ReferenceSurfaceVertex
    {
    public Vector3.Vector Normal;
    public Vector3.Vector Flat;
    }




  private EarthSurfaceLine()
    {
    }



  internal EarthSurfaceLine( MainForm UseForm,
                      int ArraySize,
                      double UseRadiusMinor,
                      double UseRadiusMajor )
    {
    MForm = UseForm;
    RadiusMinor = UseRadiusMinor;
    RadiusMajor = UseRadiusMajor;

    RefSurfaceVertexArray = new ReferenceSurfaceVertex[ArraySize];
    RefVertexArrayLast = ArraySize;
    }



  private void ShowStatus( string ToShow )
    {
    if( MForm == null )
      return;

    MForm.ShowStatus( ToShow );
    }



  internal int GetRefVertexArrayLast()
    {
    return RefVertexArrayLast;
    }




  internal void DoEarthTiltRotations()
    {
    QuaternionEC.QuaternionRec Axis = new QuaternionEC.QuaternionRec();
    QuaternionEC.QuaternionRec RotationQ = new QuaternionEC.QuaternionRec();
    QuaternionEC.QuaternionRec InverseRotationQ = new QuaternionEC.QuaternionRec();

    double Angle = -23.43689;
    Angle = NumbersEC.DegreesToRadians( Angle );

    Axis.X = 1; // Rotate around the X axis.
    Axis.Y = 0;
    Axis.Z = 0;
    Axis.W = 0;

    QuaternionEC.SetAsRotation( ref RotationQ,
                                ref Axis,
                                Angle );

    QuaternionEC.Inverse( ref InverseRotationQ, ref RotationQ );


    Vector3.Vector ResultPoint = new Vector3.Vector();
    QuaternionEC.QuaternionRec MiddlePoint = new
               QuaternionEC.QuaternionRec();

    for( int Count = 0; Count < RefVertexArrayLast; Count++ )
      {
      ReferenceVertex RefVertex = RefVertexArray[Count];


      QuaternionEC.RotateVector3(
                     ref ResultPoint,
                     ref RotationQ,
                     ref InverseRotationQ,
                     ref RefVertex.Position,
                     ref MiddlePoint );

      RefVertex.Position = ResultPoint;



      QuaternionEC.RotateVector3(
                     ref ResultPoint,
                     ref RotationQ,
                     ref InverseRotationQ,
                     ref RefSurfaceVertex.Normal,
                     ref MiddlePoint );

      RefSurfaceVertex.Normal = ResultPoint;



      // RefVertex.Velocity = ResultPoint;

      // After all the vectors are set:
      RefVertexArray[Count] = RefVertex;
      }
    }




  private void MakePoleRow( double ApproxLatitude )
    {
    ReferenceVertex RefVertex = new ReferenceVertex();
    ReferenceSurfaceVertex RefSurfaceVertex = new ReferenceSurfaceVertex();

    RefVertex.Position.X = 0;
    RefVertex.Position.Y = 0;

    RefSurfaceVertex.FlatNoRotate.Y = 0;
    RefSurfaceVertex.FlatNoRotate.Z = 0;
    RefSurfaceVertex.Normal.X = 0;
    RefSurfaceVertex.Normal.Y = 0;

    if( ApproxLatitude > 0 )
      {
      RefVertex.Position.Z = RadiusMinor;
      RefSurfaceVertex.FlatNoRotate.X = -1;
      RefSurfaceVertex.Normal.Z = 1;
      }
    else
      {
      RefVertex.Position.Z = -RadiusMinor;
      RefSurfaceVertex.FlatNoRotate.X = 1;
      RefSurfaceVertex.Normal.Z = -1;
      }

    RefVertexArray[0] = RefVertex;

    if( IsSurface )
      RefSurfaceVertexArray[0] = RefSurfaceVertex;

    }



  internal void MakeVertexRow(
                       double ApproxLatitude,
                       double LongitudeHoursRadians )
    {
    try
    {
    if( RefVertexArrayLast < 2 )
      {
      MakePoleRow( ApproxLatitude );
      return;
      }

    double LatRadians = NumbersEC.DegreesToRadians( ApproxLatitude );
    double CosLatRadians = Math.Cos( LatRadians );
    double SinLatRadians = Math.Sin( LatRadians );
    double CosLatRadiansPlusDelta = Math.Cos( LatRadians + LatitudeRadiansDelta );
    double SinLatRadiansPlusDelta = Math.Sin( LatRadians + LatitudeRadiansDelta );

    double LonStart = -180.0;

    // There is a beginning vertex at -180 longitude
    // and there is an ending vertex at 180
    // longitude, which is the same place, but they
    // are associated with different texture
    // coordinates.  One at the left end of the
    // texture and one at the right end.
    // So this is minus 1:
    double LonDelta = 360.0d / (double)(RefVertexArrayLast - 1);

    for( int Count = 0; Count < RefVertexArrayLast; Count++ )
      {
      ReferenceVertex RefVertex = new ReferenceVertex();

      double Longitude = LonStart + (LonDelta * Count);
      double LonRadians = NumbersEC.DegreesToRadians(
                                          Longitude );

      // Higher hours make the sun set in the west.
      LonRadians += LongitudeHoursRadians;

      double CosLonRadians = Math.Cos( LonRadians );
      double SinLonRadians = Math.Sin( LonRadians );

      // Along the equatorial axis:
      RefVertex.Position.X = RadiusMajor * (CosLatRadians * CosLonRadians );
      RefVertex.Position.Y = RadiusMajor * (CosLatRadians * SinLonRadians );

      // Along the polar axis:
      RefVertex.Position.Z = RadiusMinor * SinLatRadians;

      SetSurfaceNormal( ref RefVertex,
                   CosLatRadians,
                   SinLatRadians,
                   CosLatRadiansPlusDelta,
                   SinLatRadiansPlusDelta,
                   CosLonRadians,
                   SinLonRadians,
                   ApproxLatitude );

      RefVertexArray[Count] = RefVertex;
      }
    }
    catch( Exception Except )
      {
      ShowStatus( "Exception in EarthLine.MakeVertexRow(): " + Except.Message );
      }
    }




  internal ReferenceVertex GetRefVertex( int Where )
    {
    if( Where >= RefVertexArrayLast )
      throw( new Exception( "Where >= RefVertexArrayLast in EarthLine." ));

    return RefVertexArray[Where];
    }




  private void SetSurfaceNormal(
                      ref ReferenceVertex RefVertex,
                      ref ReferenceSurfaceVertex RefSurfaceVertex,
                      double CosLatRadians,
                      double SinLatRadians,
                      double CosLatRadiansPlusDelta,
                      double SinLatRadiansPlusDelta,
                      double CosLonRadians,
                      double SinLonRadians,
                      double ApproxLatitude )
    {
    if( ApproxLatitude < -89.999 )
      throw( new Exception( "ApproxLatitude < -89.999 in SetSurfaceNormal()." ));

    if( ApproxLatitude > 89.999 )
      throw( new Exception( "ApproxLatitude > 89.999 in SetSurfaceNormal()." ));

    // If it's at the equator.
    if( (ApproxLatitude < 0.00001) &&
        (ApproxLatitude > -0.00001))
      {
      // This avoids calculating a perpendicular
      // with two vectors _very_ close to each other.
      // It avoids normalizing a very small vector.
      RefSurfaceVertex.Normal.X = RefVertex.Position.X;
      RefSurfaceVertex.Normal.Y = RefVertex.Position.Y;
      RefSurfaceVertex.Normal.Z = 0;
      Vector3.Normalize( ref RefSurfaceVertex.Normal, RefSurfaceVertex.Normal );

      RefSurfaceVertex.FlatNoRotate.X = 0;
      RefSurfaceVertex.FlatNoRotate.Y = 0;
      RefSurfaceVertex.FlatNoRotate.Z = 1;

      return;
      }

    Vector3.Vector PositionAtDelta = new Vector3.Vector();
    PositionAtDelta.X = RadiusMajor * (CosLatRadiansPlusDelta * CosLonRadians );
    PositionAtDelta.Y = RadiusMajor * (CosLatRadiansPlusDelta * SinLonRadians );
    PositionAtDelta.Z = RadiusMinor * SinLatRadiansPlusDelta;

    Vector3.Copy( ref RefSurfaceVertex.FlatNoRotate, ref PositionAtDelta );
    Vector3.Subtract( ref RefVertex.SurfaceFlat, ref RefVertex.Position );

    if( RefVertex.Position.Z > PositionAtDelta.Z )
      throw( new Exception( "RefVertex.Position.Z > PositionAtDelta.Z." ));

    if( RefVertex.SurfaceFlat.Z < 0 )
      throw( new Exception( "RefVertex.SurfaceFlat.Z < 0." ));

    double FlatNorm = Vector3.Norm( ref RefVertex.SurfaceFlat );

    if( FlatNorm < MinFlatNorm )
      MinFlatNorm = FlatNorm;

    if( FlatNorm > MaxFlatNorm )
      MaxFlatNorm = FlatNorm;

    Vector3.Normalize( ref RefVertex.SurfaceFlat, RefVertex.SurfaceFlat );

    RefVertex.SurfaceFlatNoRotate = RefVertex.SurfaceFlat;

    // Straight up through the north pole.
    Vector3.Vector StraightUp = new Vector3.Vector();
    StraightUp.X = 0;
    StraightUp.Y = 0;
    StraightUp.Z = 1;

    // The dot product of two normalized vectors.
    double Dot = Vector3.DotProduct( ref StraightUp, ref RefVertex.SurfaceFlat );

    if( Dot < 0 )
      throw( new Exception( "Dot < 0." ));

    if( Dot < MinDotProduct )
      MinDotProduct = Dot;

    if( Dot > MaxDotProduct )
      MaxDotProduct = Dot;

    Vector3.Vector PerpenVector = new Vector3.Vector();
    // Make a vector perpendicular to FlatVector and
    // toward StraightUp.
    Vector3.MakePerpendicular( ref PerpenVector, ref RefVertex.SurfaceFlat, ref StraightUp );
    if( RefVertex.Position.Z < 0 )
      Vector3.Negate( ref PerpenVector );

    Vector3.Copy( ref RefVertex.SurfaceNormal, ref PerpenVector );
    }






///////////////
Get these working.

  private void SetCentrifugalAcceleration(
                      ref ReferenceVertex RefVertex,
                      ref LatLongPosition Result,
                      double CosLatRadians,
                      double SinLatRadians,
                      double CosLonRadians,
                      double SinLonRadians,
                      double LonRadians )
    {
    // double XNoLongitude = RadiusMajor * CosLatRadians;
    // Ellipse.TestZValue( Result.Position.Z, SinLatRadians, XNoLongitude );

    Vector3.Vector CentrifugeVector = new Vector3.Vector();
    CentrifugeVector.X = RefVertex.Position.X;
    CentrifugeVector.Y = RefVertex.Position.Y;
    CentrifugeVector.Z = 0;

    double CentrifugeRadius = Vector3.Norm( ref CentrifugeVector );

    // This circumferance is the path that a vertex
    // takes as it rotates around on the surface of
    // the Earth.
    double Circumference =
             CentrifugeRadius * 2.0d * Math.PI;

    double AngleDelta =
          ModelConstants.EarthRotationAnglePerSecond;

    double CosLonRadiansMoveTo =
       Math.Cos( LonRadians + AngleDelta );
    double SinLonRadiansMoveTo =
       Math.Sin( LonRadians + AngleDelta );

    // The position one second later.
    Vector3.Vector MoveTo = new Vector3.Vector();
    MoveTo.X = ModelConstants.EarthRadiusMajor * (CosLatRadians * CosLonRadiansMoveTo );
    MoveTo.Y = ModelConstants.EarthRadiusMajor * (CosLatRadians * SinLonRadiansMoveTo );
    MoveTo.Z = ModelConstants.EarthRadiusMinor * SinLatRadians;

    double CosLonRadiansEarlier =
       Math.Cos( LonRadians - AngleDelta );
    double SinLonRadiansEarlier =
       Math.Sin( LonRadians - AngleDelta );

    // The position one second earlier.
    Vector3.Vector EarlierPosition = new Vector3.Vector();
    EarlierPosition.X = ModelConstants.EarthRadiusMajor * (CosLatRadians * CosLonRadiansEarlier );
    EarlierPosition.Y = ModelConstants.EarthRadiusMajor * (CosLatRadians * SinLonRadiansEarlier );
    EarlierPosition.Z = ModelConstants.EarthRadiusMinor * SinLatRadians;

    // This is how many meters it has moved in one
    // second.  So velocity is meters per second.
    Vector3.Vector VelocityMoveTo = new Vector3.Vector();
    Vector3.Copy( ref VelocityMoveTo, ref MoveTo );
    Vector3.Subtract( ref VelocityMoveTo, ref RefVertex.Position );

    Vector3.Copy( ref RefVertex.Velocity, ref VelocityMoveTo );

    // The velocity in the period from one second
    // earlier.
    Vector3.Vector VelocityEarlier = new Vector3.Vector();
    Vector3.Copy( ref VelocityEarlier, ref RefVertex.Position );
    Vector3.Subtract( ref VelocityEarlier, ref EarlierPosition );

    // This is the change in velocity in one second.

    // Earlier + acceleration = Later.
    // Later - Earlier = acceleration.
    Vector3.Copy( ref RefVertex.CentrifugalAccel, ref VelocityMoveTo );
    Vector3.Subtract( ref RefVertex.CentrifugalAccel, ref VelocityEarlier );

    // Make it point outward.
    Vector3.Negate( ref RefVertex.CentrifugalAccel );

    Vector3.Vector TestDirection = new Vector3.Vector();
    Vector3.Copy( ref TestDirection, ref RefVertex.CentrifugalAccel );
    Vector3.Normalize( ref TestDirection, TestDirection );
    Vector3.Normalize( ref CentrifugeVector, CentrifugeVector );
    // The cosine between them should be 1.0 since
    // they should point in exactly the same
    // direction.

    double Dot = Vector3.DotProduct(
           ref TestDirection, ref CentrifugeVector );
    if( (Dot > 1.00000001) || (Dot < 0.99999999) )
      throw( new Exception( "The vectors don't line up: " + Dot.ToString( "N10" ) ));

    double AccelNorm = Vector3.Norm( ref RefVertex.CentrifugalAccel );
    // MaxAccelNorm is pretty small: 0.03

    if( AccelNorm > MaxAccelNorm )
      MaxAccelNorm = AccelNorm;

    if( RefVertex.Velocity.X > MaxXVelocity )
      MaxXVelocity = RefVertex.Velocity.X;

    }





  private void SetGravityAcceleration(
                      ref ReferenceVertex RefVertex,
                      ref LatLongPosition Result )
    {
    double EarthRadius =
                 Vector3.Norm( ref RefVertex.Position );

    Vector3.Copy( ref RefVertex.EarthGravityAccel, ref RefVertex.Position );
    Vector3.Normalize( ref RefVertex.EarthGravityAccel, RefVertex.EarthGravityAccel );

    // Make it point toward the center of gravity.
    Vector3.Negate( ref RefVertex.EarthGravityAccel );

    double EarthAccel =
               (ModelConstants.MassOfEarth *
               ModelConstants.GravitationConstant) /
               (EarthRadius * EarthRadius);

    if( EarthAccel < EarthAccelMin )
      EarthAccelMin = EarthAccel;

    if( EarthAccel > EarthAccelMax )
      EarthAccelMax = EarthAccel;

      // EarthAccelMax:     9.8643342185
      // EarthAccelMin:     9.7982976481

    Vector3.MultiplyWithScalar( ref RefVertex.EarthGravityAccel, EarthAccel );

    Vector3.Vector TestVector = new Vector3.Vector();
    Vector3.Copy( ref TestVector, ref RefVertex.EarthGravityAccel );
    Vector3.Add( ref TestVector, ref RefVertex.CentrifugalAccel );
    Vector3.Normalize( ref TestVector, TestVector );

    // The dot product of two normalized vectors.
    double Dot = Vector3.DotProduct( ref TestVector, ref Result.SurfaceNormal );
    // They are _almost_ pointing in exactly the
    // opposite direction.
    // Exception at: if( (Dot > -0.999999))
    // It's at: -0.9999989915
    if( (Dot > -0.99999))
      throw( new Exception( "The Dot to the surface normal is not right: " + Dot.ToString( "N10" ) ));

    // Adding two vectors that are pointing in
    // opposite directions.
    Vector3.Add( ref TestVector, ref Result.SurfaceNormal );
    double SurfaceTest = Vector3.Norm( ref TestVector );

    // MaxSurfaceTest: 0.0016429800
    // MaxAccelNorm: 0.03
    if( SurfaceTest > MaxSurfaceTest )
      MaxSurfaceTest = SurfaceTest;

    }





  private void SetPlanetGravityAcceleration(
                  ref ReferenceFrame RefFrame )
    {

    RefFrame.SetPlanetGravityAcceleration(
                  ref Vector3.Vector Position )
                  ref Vector3.Vector Acceleration )


    }





  }
}

*/
